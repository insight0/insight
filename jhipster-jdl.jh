
enum ChangeTrigger {
	USER, SYSTEM
}

enum ChangeType {
	CREATE, UPDATE, DESACTIVATE, DELETE
}

enum ContractType {
	SIVP, KARAMA, CDD, CDI, SUMMER_TRAINEESHIP, FINAL_YEAR_TRAINEESHIP, FREELANCER
}

enum DayOffStatus {
	NEW, DECLINED, APPROVED
}
enum ContractType {
	SIVP, KARAMA, CDD, CDI, SUMMER_TRAINEESHIP, FINAL_YEAR_TRAINEESHIP, FREELANCER
}


entity DayOff {
    startDate Instant required,
    endDate Instant required,
    dayOffObject String required,
    status DayOffStatus,
    forced Boolean required,
    employeId String required,
    validatorId String required,
    days Float required
}

entity ChangeLog {
	userId String required,
    date Instant required,
    changeTrigger ChangeTrigger required,
    changeType ChangeType required,
    description String
}



entity Holiday{
    name String required, 
    description String required,
    year Integer required,
    dayOfYear Integer required,
    weekOfYear Integer required,
    dayOfWeek Integer required
    paid Boolean required
}

entity Contact {
    /** TODO: private Address address; */
	firstName String required,
    lastName String required,
    role String,
    phoneNumber String,
    email String,
    organisationId String required,
    type ContractType
}

entity DocumentPlaceholder {

    /** TODO: private List<DocumentHistory> versions; TODO: private List<ChangeLog> changeLogs; */
	name String required,
    description String required,
    version String required,
    url String required,
    type String required,
    size String required
}


entity FunctionalRole {
  	name String required,
  	description String required,
  	maxHolidays Integer required,
  	workingHours Integer required
}

entity Contract {
    /** TODO: private DocumentPlaceholder digitalCopy; */

	type ContractType required,
    startDate Instant required,
    endDate Instant,
    employeeSignatureDate Instant,
    directionSignatureDate Instant,
    description String,
	dayOffNamber Float required
}

entity Address {
	line1 String required,
    line2 String,
	city String required,
    postalCode String required,
    country String required,
    ltd Integer,
    lgt Integer
}

entity SalaryPackage {
    /** TODO: private List<ChangeLog> changeLogs; */
	netSalaryPerMonth Float required,
    nationalInsurancePerMonth Float required,
    taxPerMonth Float required,
    privateInsurancePerMonth Float required,
    mealVoucherPerMonth Float required,
	bonusPerYear Float required
}

entity Organisation {
    /** TODO: private Address address;TODO: private List<Contact> contacts; */
	name String required,
    phoneNumber String,
    siteUrl String,
    logoUrl String,
    email String
}


// Set pagination options
paginate all with infinite-scroll

// Use Data Transfert Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
